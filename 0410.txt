0410

<Bootstrap 다운로드 URL>
http://getbootstrap.com
- 간단한 디자인이 가능한 프론트엔드 라이브러리
ㄴstyle과 strap을 같이 씀

https://getbootstrap.com/docs/5.3/getting-started/download/
- bootstrap.min.css
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">

- bootstrap.bundle.min.js
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script>



--------------------------------bootstrap------------------------------------

- views 함수명: bootstrap01()
- 01_bootstrap.html 생성
- url 패턴: bootstrap01

<!-- bootstrap.min.css 적용하기 -->
1. <link href="static/frontapp/bootstrap/css/bootstrap.min.css">
2. {%load static%}
    <link href="{% static 'frontapp/bootstrap/css/bootstrap.min.css' %}"
        rel="stylesheet">


 <!-- jQuery 적용하기 -->
<script type ="text/javascript"
             src = "{% static 'frontapp/js/jquery-3.6.4.min.js' %}">
</script>


<!-- Bootstrap js 적용하기 -->
<script type ="text/javascript"
             src = "{% static 'frontapp/bootstrap/js/bootstrap.bundle.min.js' %}">



------------------------------------------------------------------------------

- views 함수명: bootstrap_table()
- 02_bootstrap_table.html 생성
- url 패턴: bootstrap_table



------------------------------------------------------------------------------

- views 함수명: bootstrap_form()
- 03_bootstrap_form.html 생성
- url 패턴: bootstrap_form



================================================================

system / dbdb


<사용자(DB) 생성하기>

Create User 계정명 Identified By 패스워드;
- Create User gwangju_a Identified By dbdb;


<사용자 패스워드 수정>
Alter user gwangju_a Identified By 패스워드;

<사용자 삭제하기>
Drop user gwangju_a;


<사용자 생성 후 권한 부여하기>
Grant Connect, Resource, DBA to gwangju_a;

<권한 회수하기>
Revoke DBA From gwangju_a;



데이터프레임
데이터를 행과 열로 구성된 2차원 배열 형태로 이용 가능하게 만들어 놓은 공간
파이썬 사용
=> 데이터프레임과 테이블의 의미는 유사하나 사용하는 것이 다름

테이블
2차원의 행렬 데이터를 저장하는 공간
sql 구문 사용


테이블 정의서
컬럼명(영어)-한글명-자료형-NULL-key




----------------------------(개발) 프로젝트 순서------------------------------
->> 개발은 무엇을 만들지 >주제<가 정해짐

1.  계획 수립
- 주제 선정: 컴퓨터 판매 쇼핑몰 구축
- 수행 기간: 언제부터~ 언제까지
- 일정 계획 수립 -- ★★산출물 포함(일정표)
- 인원 계획 수립(몇 명, 역할 - PM, PL, 개발, 디자인..)
- 예산 수립: 비용 산정(인건비, 개발장비비, 부식비..)
장소, 비용, 도구, 인원
- 고객 여부: 내부 개발(회사 자체에서 주제 발굴 개발)
	       : 외부 개발(고객이 요청한 주제 개발)

2. 요구 사항 수렴
- 주제에 맞게 어떻게 만들어 갈 것인지에 대한 스토리텔링 진행..
- 미팅 내용은 다듬어지지 않은 상태로 정리됨..

3. 요구 분석
- 수렴된 요구 사항을 정리(카테고리별 > 메뉴별로 구분 작업)
- 사이트 맵(site map)이 만들어짐
- 메뉴 구조도가 만들어짐: ★★산출물
- 메뉴에 대한 상세한 항목들이 정의됨

4. 분석 설계
-  DB 설계: 담기 위한 공간/ ★★Table 설계(ERD(개체 관계도), 테이블 정의서)
- 화면 설계: 담기 위한 방법/ ★★화면 정의서(메뉴 구조에 맞게 화면 그리기)
- system 설계: DB 설계와 화면 설계가 연결될 수 있는 구조/ ★★서버 선택(웹 서버, DB 서버, 네트워크 구성 등)
		: ★★프로그램 선택(Front and Back end)
		: ★★개발 Tool 선택
		: ★★사용 라이브러리

5. 구현(개발)
- System  구축: DB 구축, 웹 서버 구축 
- UI 개발: 화면 개발(html, css, js 등등) -> 웹 디자이너
	  : 화면 시안(demo) 개발 -> index 페이지, sub 페이지 각 3개 정도씩
- 프로그램 개발: 개발자

6. 테스트

7. 운영 유지 보수


테이블 생성은 부모 - 자식
테이블 삭제는 자식 - 부모


DB가 컬럼명 대문자로 넘겨줌





-- Database 설정: settings.py
-- App 생성: oracelapp
> django-admin startapp oracleapp


-----------------------------------------------------------------------------

- views 함수명: index()
- url 패턴: index도 추가
- HttpResponse로 'oracle 페이지입니다.' 메시지 보이게
- index.html 파일 생성
-- 파일 내용은 'oracle index 페이지입니다.'

























